# util for natural sorting
import re
import pandas as pd
from collections.abc import Iterable
import plotnine as p9
import numpy as np

def ccr8BispecificGenes():
    # TNFRSF8 (aka CD30)
    # FUT7 (aka CD15s)
    return 'CD177 TNFRSF8 CD74 FUT7 IL1R2'.split()
    

def do_diffexp(df, groupA='control', groupB='colitis', subtypeA=['3__treg3','4__treg4'], subtypeB=['1__treg1'], col_subtype = 'authors_cell_type_level_3__treg_subclustering', RDS='luoma2020_tregs_cluster_bioturing.rds',THRESHOLD_PVALADJ=1e-2):
    '''
    Does DE via Seurat FindMarkers
    '''
    import os
    import plotnine as p9
    CWD='/Users/nbatada/data/rnaseq/CANCER_2020_32603654_LUOMA/bioturing/treg_cluster_over_allcells'
    os.chdir(CWD)

    # check that subtypeA and subtypeB are values in the col_subtype

    col_group='group'
    dfA=df[df[col_group]==groupA] 
    dfB=df[df[col_group]==groupB] 

    barcodesA= dfA[ dfA[col_subtype].isin(subtypeA)].reset_index()['barcode']
    barcodesB= dfB[ dfB[col_subtype].isin(subtypeB)].reset_index()['barcode']

    barcodesA.to_csv('barcodesA.txt', index=False, header=False)
    barcodesB.to_csv('barcodesB.txt', index=False, header=False)

    # run the diff exp
    results_filename='results_diffexpr_A_vs_B.tsv'
    os.system(f'/Users/nbatada/bin/find_diff_expr_genes.sh {RDS} barcodesA.txt barcodesB.txt {results_filename}')

    # read results
    df_deg=pd.read_csv(results_filename,sep='\t', header=0)
    
    # only keep significant ones
    THRESHOLD_PVALADJ=1e-2

    df_deg = df_deg[ (df_deg['p_val_adj'] < THRESHOLD_PVALADJ)]
    #g=p9.ggplot(df_deg, p9.aes(x='avg_log2FC', y='p_val_adj')) + p9.geom_point(alpha=0.1) + p9.xlim(-5,5) + p9.scale_y_log10()
    #print(g)
    os.system(f'/Users/nbatada/bin/plot_heatmap_of_degs.sh {RDS} barcodesA.txt barcodesB.txt {results_filename}')
    print('open heatmap_output.pdf')
    return(df_deg)



def volcano_plot(df, title=''):
    # Reset index to access gene names
    df = df.reset_index()
    
    # Calculate -log10(p_val_adj) for the y-axis
    df['neg_log10_pval_adj'] = -np.log10(df['p_val_adj'])
    
    # Get top 10 significant genes for avg_log2FC > 0
    top10_up = df[df['avg_log2FC'] > 0].nsmallest(10, 'p_val_adj')

    # Get top 10 significant genes for avg_log2FC < 0
    top10_down = df[df['avg_log2FC'] < 0].nsmallest(10, 'p_val_adj')

    # Combine both lists
    top_genes = pd.concat([top10_up, top10_down])

    # Determine y-axis limits
    ymin = 0
    ymax = np.ceil(df['neg_log10_pval_adj'].max())
    # Create the volcano plot
    g = (
        p9.ggplot(df, p9.aes(x='avg_log2FC', y='neg_log10_pval_adj')) +
        p9.geom_point(alpha=0.2) +
        p9.scale_x_continuous(limits=(-5, 5)) +
        p9.scale_y_continuous(limits=(ymin, ymax)) +
        p9.geom_vline(xintercept=1, linetype='dashed', color='red') +
        p9.geom_vline(xintercept=-1, linetype='dashed', color='red') +
        p9.geom_hline(yintercept=-np.log10(1e-2), linetype='dashed', color='blue') +
        p9.geom_text(p9.aes(label='index'), 
                     data=top_genes, 
                     nudge_y=0.2, 
                     size=8, 
                     ha='center')  +
        p9.ggtitle(f'{title}')
    )

    return g


def barplot_rownames_as_xticks(T): 
    # Input: T is a tabulated data (i.e. utils.tabulate output)
    T_long=T.reset_index().melt(id_vars=['index'])

    T_long.columns=['colnames','rownames','value']

    FILL='rownames' # default incase it is not normalized

    # check both colsum and rowsum to determine what coloring to use in FILL
    if np.all(np.isin(T.sum(axis=0).astype('int'), [1, 100])): # could be 1 or 100
        FILL = 'colnames'
        #print('is normalized by column (down) sum')
    elif np.all(np.isin(T.sum(axis=1).astype('int'), [1, 100])):
        FILL = 'rownames'
        #print('is normalized by row (across) sum')
    g = (p9.ggplot(T_long, p9.aes(x='rownames', y='value', fill=FILL))
         + p9.geom_bar(stat='identity', position='dodge')
         + p9.facet_grid('colnames~') # alway colnames (stacked) because rownames is on xtick axis
         + p9.theme(axis_text_x=p9.element_text(rotation=25, hjust=1),
                    legend_position='none')  # Remove legend
         )
    
    return(g)


def tabulate(df, r, c, normalize_by=None):
    '''
    r and c are column names in df
    in the output: r-values will be in rownames/index and c-values will be colnames
    
    USAGE: tabulate(df_tregs, 'group', 'authors_cell_type_level_3__treg_subclustering')

    normalize_by=None, rowsum or colsum

    '''
    u = df.groupby([r, c]).size().reset_index(name='count') # long
    
    T = u.pivot(index=r, columns=c, values='count') # compact r x c 
    
    #T['rowsum'] = T.sum(axis=1).astype('int')
    rowsum = T.sum(axis=1) #.astype('int')
    
    #T.loc['colsum'] = T.sum(axis=0).astype('int')
    colsum = T.sum(axis=0) #.astype('int')


    T.index.name = None
    T.columns.name = None
    T=T.fillna(0)
    if (normalize_by=='rowsum') | (normalize_by=='row'):
        #T=x.div(T[normalize_by], axis=0)*100
        T=T.div(rowsum, axis=0)*100
    elif (normalize_by=='colsum')| (normalize_by=='column'):
        #T=x.div(T.loc[normalize_by], axis=1)*100
        T=T.div(colsum, axis=1)*100
    elif (normalize_by=='total'):
        T = T / T.to_numpy().sum()
    return T


def clean_str_values(x):
    '''
    Cleanup names from strings such as column names of a dataframe or values within a column of a dataframe.

    Usage:
          df.columns = utils.clean_str_values(df.columns)
          df[c] = utils.clean_str_values(df[c])

    '''
    if isinstance(x, pd.Series) or isinstance(x, pd.Index):
        return x.str.lower().str.replace(' ', '_').str.replace("'", '').str.replace('-', '').str.replace('(', '').str.replace(')', '').str.replace('.', '_').str.replace(':', '_')
    elif isinstance(x, list):
        return [str(item).lower().replace(' ', '_').replace("'", '').replace('-', '').replace('(', '').replace(')', '').replace('.', '_').replace(':', '_') for item in x]
    else:
        raise TypeError("Input must be a Pandas Series, Index, or a list.")



def cmp_natural(text):
    '''
    compare function for sorting sample or gene names with (string+number )

    USAGE: alist.sort(key=cmp_natural) sorts in human order
    '''
    def atoi(text): 
        return int(text) if text.isdigit() else text
    return [ atoi(c) for c in re.split(r'(\d+)', text) ]
